name: build

on:
  workflow_call:
  workflow_dispatch:
  push:
    paths:
      - 'version/version.go'
    branches:    
      # Push events on main branch
      - main

env:
  PKG_NAME: "enos"
outputs:
  artifact-name: ${{ jobs.build.outputs.artifact-name }}

jobs:
  get-product-version:
    runs-on: linux
    outputs:
      product-version: ${{ steps.get-product-version.outputs.product-version }}
    steps:
      - uses: actions/checkout@v2
      - name: get product version
        id: get-product-version
        run: |
          make version
          echo "::set-output name=product-version::$(make version)"
  generate-metadata-file:
    needs: get-product-version
    runs-on: linux
    outputs:
      filepath: ${{ steps.generate-metadata-file.outputs.filepath }}
    steps:
      - name: 'Checkout directory'
        uses: actions/checkout@v2
      - name: Generate metadata file
        id: generate-metadata-file
        uses: hashicorp/actions-generate-metadata@main
        with:
          version: ${{ needs.get-product-version.outputs.product-version }}
          product: ${{ env.PKG_NAME }}

      - uses: actions/upload-artifact@v2
        with:
          name: metadata.json
          path: ${{ steps.generate-metadata-file.outputs.filepath }}

  build:
    needs: get-product-version
    runs-on: linux
    strategy:
      matrix:
        include:
          - {go: "1.17", goos: "linux", goarch: "amd64"}
          - {go: "1.17", goos: "linux", goarch: "arm64"}
          - {go: "1.17", goos: "darwin", goarch: "amd64"}
          - {go: "1.17", goos: "darwin", goarch: "arm64"}
      fail-fast: true

    name: Go ${{ matrix.go }} ${{ matrix.goos }} ${{ matrix.goarch }} build
    env:
      GOPRIVATE: 'github.com/hashicorp/*'
      TOKEN: ${{ secrets.ELEVATED_GITHUB_TOKEN }}
    outputs:
      artifact-name: ${{ steps.Build.with.name }}

    steps:
      - uses: actions/checkout@v2

      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir dist out
          make
          zip -r -j out/${{ env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip enos
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip
          path: out/${{ env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip

      - name: Package
        if: ${{ matrix.goos == 'linux' }}
        uses: hashicorp/package@v1
        with:
          name: ${{ github.event.repository.name }}
          description: "enos CLI package"
          arch: ${{ matrix.goarch }}
          version: ${{ needs.get-product-version.outputs.product-version }}
          maintainer: "HashiCorp"
          homepage: "https://github.com/hashicorp/enos"
          license: "MPL-2.0"
          binary: "${{ env.PKG_NAME }}"
          deb_depends: "openssl"
          rpm_depends: "openssl"

      - name: Set Package Names
        if: ${{ matrix.goos == 'linux' }}
        run: |
          echo "RPM_PACKAGE=$(basename out/*.rpm)" >> $GITHUB_ENV
          echo "DEB_PACKAGE=$(basename out/*.deb)" >> $GITHUB_ENV
      - uses: actions/upload-artifact@v2
        if: ${{ matrix.goos == 'linux' }}
        with:
          name: ${{ env.RPM_PACKAGE }}
          path: out/${{ env.RPM_PACKAGE }}

      - uses: actions/upload-artifact@v2
        if: ${{ matrix.goos == 'linux' }}
        with:
          name: ${{ env.DEB_PACKAGE }}
          path: out/${{ env.DEB_PACKAGE }}

  # build-darwin:
  #   needs: get-product-version
  #   runs-on: macos-latest
  #   strategy:
  #     matrix:
  #       include:
  #         - {go: "1.17", goos: "darwin", goarch: "amd64"}
  #         - {go: "1.17", goos: "darwin", goarch: "arm64"}
  #     fail-fast: true

  #   name: Go ${{ matrix.go }} ${{ matrix.goos }} ${{ matrix.goarch }} build

  #   env:
  #     GOOS: ${{ matrix.goos }}
  #     GOARCH: ${{ matrix.goarch }}
  #     GOPRIVATE: 'github.com/hashicorp/*'
  #     TOKEN: ${{ secrets.ELEVATED_GITHUB_TOKEN }}

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Setup go
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: ${{ matrix.go }}

  #     - name: Build
  #       run: |
  #         mkdir dist out
  #         make
  #         zip -r -j out/${{ env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip dist/
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: ${{ env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip
  #         path: out/${{ env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip

  build-docker:
    name: Docker ${{ matrix.arch }} build
    needs:
      - get-product-version
      - build
    runs-on: linux
    strategy:
      matrix:
        arch: ["arm64", "amd64"]
    env:
      repo: ${{github.event.repository.name}}
      version: ${{needs.get-product-version.outputs.product-version}}
      GOPRIVATE: 'github.com/hashicorp/*'
      TOKEN: ${{ secrets.ELEVATED_GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2
      - name: Docker Build (Action)
        uses: hashicorp/actions-docker-build@v1
        with:
          version: ${{env.version}}
          target: default
          arch: ${{matrix.arch}}
          tags: |
            docker.io/hashicorp/${{env.repo}}:${{env.version}}
            986891699432.dkr.ecr.us-east-1.amazonaws.com/hashicorp/${{env.repo}}:${{env.version}}
