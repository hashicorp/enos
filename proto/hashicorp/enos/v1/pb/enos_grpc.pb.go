// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: enos.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnosServiceClient is the client API for EnosService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnosServiceClient interface {
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
	ListScenarios(ctx context.Context, in *ListScenariosRequest, opts ...grpc.CallOption) (*ListScenariosResponse, error)
	ValidateScenarios(ctx context.Context, in *ValidateScenariosRequest, opts ...grpc.CallOption) (*ValidateScenariosResponse, error)
	GenerateScenarios(ctx context.Context, in *GenerateScenariosRequest, opts ...grpc.CallOption) (*GenerateScenariosResponse, error)
	LaunchScenarios(ctx context.Context, in *LaunchScenariosRequest, opts ...grpc.CallOption) (*LaunchScenariosResponse, error)
	DestroyScenarios(ctx context.Context, in *DestroyScenariosRequest, opts ...grpc.CallOption) (*DestroyScenariosResponse, error)
	RunScenarios(ctx context.Context, in *RunScenariosRequest, opts ...grpc.CallOption) (*RunScenariosResponse, error)
	ExecScenarios(ctx context.Context, in *ExecScenariosRequest, opts ...grpc.CallOption) (*ExecScenariosResponse, error)
	OutputScenarios(ctx context.Context, in *OutputScenariosRequest, opts ...grpc.CallOption) (*OutputScenariosResponse, error)
}

type enosServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnosServiceClient(cc grpc.ClientConnInterface) EnosServiceClient {
	return &enosServiceClient{cc}
}

func (c *enosServiceClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.enos.v1.EnosService/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enosServiceClient) ListScenarios(ctx context.Context, in *ListScenariosRequest, opts ...grpc.CallOption) (*ListScenariosResponse, error) {
	out := new(ListScenariosResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.enos.v1.EnosService/ListScenarios", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enosServiceClient) ValidateScenarios(ctx context.Context, in *ValidateScenariosRequest, opts ...grpc.CallOption) (*ValidateScenariosResponse, error) {
	out := new(ValidateScenariosResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.enos.v1.EnosService/ValidateScenarios", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enosServiceClient) GenerateScenarios(ctx context.Context, in *GenerateScenariosRequest, opts ...grpc.CallOption) (*GenerateScenariosResponse, error) {
	out := new(GenerateScenariosResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.enos.v1.EnosService/GenerateScenarios", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enosServiceClient) LaunchScenarios(ctx context.Context, in *LaunchScenariosRequest, opts ...grpc.CallOption) (*LaunchScenariosResponse, error) {
	out := new(LaunchScenariosResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.enos.v1.EnosService/LaunchScenarios", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enosServiceClient) DestroyScenarios(ctx context.Context, in *DestroyScenariosRequest, opts ...grpc.CallOption) (*DestroyScenariosResponse, error) {
	out := new(DestroyScenariosResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.enos.v1.EnosService/DestroyScenarios", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enosServiceClient) RunScenarios(ctx context.Context, in *RunScenariosRequest, opts ...grpc.CallOption) (*RunScenariosResponse, error) {
	out := new(RunScenariosResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.enos.v1.EnosService/RunScenarios", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enosServiceClient) ExecScenarios(ctx context.Context, in *ExecScenariosRequest, opts ...grpc.CallOption) (*ExecScenariosResponse, error) {
	out := new(ExecScenariosResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.enos.v1.EnosService/ExecScenarios", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enosServiceClient) OutputScenarios(ctx context.Context, in *OutputScenariosRequest, opts ...grpc.CallOption) (*OutputScenariosResponse, error) {
	out := new(OutputScenariosResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.enos.v1.EnosService/OutputScenarios", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnosServiceServer is the server API for EnosService service.
// All implementations should embed UnimplementedEnosServiceServer
// for forward compatibility
type EnosServiceServer interface {
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	ListScenarios(context.Context, *ListScenariosRequest) (*ListScenariosResponse, error)
	ValidateScenarios(context.Context, *ValidateScenariosRequest) (*ValidateScenariosResponse, error)
	GenerateScenarios(context.Context, *GenerateScenariosRequest) (*GenerateScenariosResponse, error)
	LaunchScenarios(context.Context, *LaunchScenariosRequest) (*LaunchScenariosResponse, error)
	DestroyScenarios(context.Context, *DestroyScenariosRequest) (*DestroyScenariosResponse, error)
	RunScenarios(context.Context, *RunScenariosRequest) (*RunScenariosResponse, error)
	ExecScenarios(context.Context, *ExecScenariosRequest) (*ExecScenariosResponse, error)
	OutputScenarios(context.Context, *OutputScenariosRequest) (*OutputScenariosResponse, error)
}

// UnimplementedEnosServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEnosServiceServer struct {
}

func (UnimplementedEnosServiceServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedEnosServiceServer) ListScenarios(context.Context, *ListScenariosRequest) (*ListScenariosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScenarios not implemented")
}
func (UnimplementedEnosServiceServer) ValidateScenarios(context.Context, *ValidateScenariosRequest) (*ValidateScenariosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateScenarios not implemented")
}
func (UnimplementedEnosServiceServer) GenerateScenarios(context.Context, *GenerateScenariosRequest) (*GenerateScenariosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateScenarios not implemented")
}
func (UnimplementedEnosServiceServer) LaunchScenarios(context.Context, *LaunchScenariosRequest) (*LaunchScenariosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchScenarios not implemented")
}
func (UnimplementedEnosServiceServer) DestroyScenarios(context.Context, *DestroyScenariosRequest) (*DestroyScenariosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyScenarios not implemented")
}
func (UnimplementedEnosServiceServer) RunScenarios(context.Context, *RunScenariosRequest) (*RunScenariosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunScenarios not implemented")
}
func (UnimplementedEnosServiceServer) ExecScenarios(context.Context, *ExecScenariosRequest) (*ExecScenariosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecScenarios not implemented")
}
func (UnimplementedEnosServiceServer) OutputScenarios(context.Context, *OutputScenariosRequest) (*OutputScenariosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutputScenarios not implemented")
}

// UnsafeEnosServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnosServiceServer will
// result in compilation errors.
type UnsafeEnosServiceServer interface {
	mustEmbedUnimplementedEnosServiceServer()
}

func RegisterEnosServiceServer(s grpc.ServiceRegistrar, srv EnosServiceServer) {
	s.RegisterService(&EnosService_ServiceDesc, srv)
}

func _EnosService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnosServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.enos.v1.EnosService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnosServiceServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnosService_ListScenarios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScenariosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnosServiceServer).ListScenarios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.enos.v1.EnosService/ListScenarios",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnosServiceServer).ListScenarios(ctx, req.(*ListScenariosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnosService_ValidateScenarios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateScenariosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnosServiceServer).ValidateScenarios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.enos.v1.EnosService/ValidateScenarios",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnosServiceServer).ValidateScenarios(ctx, req.(*ValidateScenariosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnosService_GenerateScenarios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateScenariosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnosServiceServer).GenerateScenarios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.enos.v1.EnosService/GenerateScenarios",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnosServiceServer).GenerateScenarios(ctx, req.(*GenerateScenariosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnosService_LaunchScenarios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchScenariosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnosServiceServer).LaunchScenarios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.enos.v1.EnosService/LaunchScenarios",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnosServiceServer).LaunchScenarios(ctx, req.(*LaunchScenariosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnosService_DestroyScenarios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyScenariosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnosServiceServer).DestroyScenarios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.enos.v1.EnosService/DestroyScenarios",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnosServiceServer).DestroyScenarios(ctx, req.(*DestroyScenariosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnosService_RunScenarios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunScenariosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnosServiceServer).RunScenarios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.enos.v1.EnosService/RunScenarios",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnosServiceServer).RunScenarios(ctx, req.(*RunScenariosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnosService_ExecScenarios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecScenariosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnosServiceServer).ExecScenarios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.enos.v1.EnosService/ExecScenarios",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnosServiceServer).ExecScenarios(ctx, req.(*ExecScenariosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnosService_OutputScenarios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutputScenariosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnosServiceServer).OutputScenarios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.enos.v1.EnosService/OutputScenarios",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnosServiceServer).OutputScenarios(ctx, req.(*OutputScenariosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnosService_ServiceDesc is the grpc.ServiceDesc for EnosService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnosService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hashicorp.enos.v1.EnosService",
	HandlerType: (*EnosServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _EnosService_GetVersion_Handler,
		},
		{
			MethodName: "ListScenarios",
			Handler:    _EnosService_ListScenarios_Handler,
		},
		{
			MethodName: "ValidateScenarios",
			Handler:    _EnosService_ValidateScenarios_Handler,
		},
		{
			MethodName: "GenerateScenarios",
			Handler:    _EnosService_GenerateScenarios_Handler,
		},
		{
			MethodName: "LaunchScenarios",
			Handler:    _EnosService_LaunchScenarios_Handler,
		},
		{
			MethodName: "DestroyScenarios",
			Handler:    _EnosService_DestroyScenarios_Handler,
		},
		{
			MethodName: "RunScenarios",
			Handler:    _EnosService_RunScenarios_Handler,
		},
		{
			MethodName: "ExecScenarios",
			Handler:    _EnosService_ExecScenarios_Handler,
		},
		{
			MethodName: "OutputScenarios",
			Handler:    _EnosService_OutputScenarios_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "enos.proto",
}
