// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

syntax = "proto3";

package hashicorp.enos.v1;

import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/hashicorp/enos/internal/pb;pb";

service EnosService {
  rpc GetVersion(GetVersionRequest) returns (GetVersionResponse) {}
  rpc ValidateScenariosConfiguration(ValidateScenariosConfigurationRequest) returns (ValidateScenariosConfigurationResponse) {}
  rpc ListScenarios(ListScenariosRequest) returns (stream EnosServiceListScenariosResponse) {}
  rpc CheckScenarios(CheckScenariosRequest) returns (CheckScenariosResponse) {}
  rpc GenerateScenarios(GenerateScenariosRequest) returns (GenerateScenariosResponse) {}
  rpc LaunchScenarios(LaunchScenariosRequest) returns (LaunchScenariosResponse) {}
  rpc DestroyScenarios(DestroyScenariosRequest) returns (DestroyScenariosResponse) {}
  rpc RunScenarios(RunScenariosRequest) returns (RunScenariosResponse) {}
  rpc ExecScenarios(ExecScenariosRequest) returns (ExecScenariosResponse) {}
  rpc OutputScenarios(OutputScenariosRequest) returns (OutputScenariosResponse) {}
  rpc Format(FormatRequest) returns (FormatResponse) {}
  rpc OperationEventStream(OperationEventStreamRequest) returns (stream OperationEventStreamResponse) {}
  rpc Operation(OperationRequest) returns (OperationResponse) {}
  rpc ListSamples(ListSamplesRequest) returns (ListSamplesResponse) {}
  rpc ObserveSample(ObserveSampleRequest) returns (ObserveSampleResponse) {}
  rpc OutlineScenarios(OutlineScenariosRequest) returns (OutlineScenariosResponse) {}
}

// UI contains messages related to the UI calling the server. This information
// will be populated by the caller and passed to the server, which it can use
// in some instances to generate output tailored for the caller.
message UI {
  message Settings {
    uint32 width = 1;
    bool is_tty = 2 [json_name = "is_tty"];
    bool use_color = 3 [json_name = "use_color"];
    Format format = 4;
    Level level = 5;
    // stdout_path if defined, we'll write our stdout messages to a file in
    // the given path
    string stdout_path = 6 [json_name = "stdout_path"];
    // stderr_path if defined, we'll write our stderr messages to a file in
    // the given path
    string stderr_path = 7 [json_name = "stderr_path"];
    // Render warnings as failures
    bool fail_on_warnings = 8 [json_name = "fail_on_warnings"];

    enum Format {
      FORMAT_UNSPECIFIED = 0;
      FORMAT_BASIC_TEXT = 1;
      FORMAT_JSON = 2;
      FORMAT_HTML = 3;
    }

    enum Level {
      LEVEL_UNSPECIFIED = 0;
      LEVEL_ERROR = 1;
      LEVEL_WARN = 2;
      LEVEL_INFO = 3;
      LEVEL_DEBUG = 4;
      LEVEL_TRACE = 5;
    }
  }
}

// Diagnostic is how we'll return error messages that may or may not have code
// context associated with it. This is general enough to handle Terraform's
// JSON output diagnostics and Enos HCL diagnostics.
message Diagnostic {
  Severity severity = 1;
  string summary = 2;
  string detail = 3;
  Range range = 4;
  Snippet snippet = 5;

  enum Severity {
    SEVERITY_UNSPECIFIED = 0;
    SEVERITY_UNKNOWN = 1;
    SEVERITY_ERROR = 2;
    SEVERITY_WARNING = 3;
  }

  message Snippet {
    string context = 1;
    string code = 2;
    int64 start_line = 3 [json_name = "start_line"];
    int64 highlight_start_offset = 4 [json_name = "highlight_start_offset"];
    int64 highlight_end_offset = 5 [json_name = "highlight_end_offset"];
    repeated ExpressionValue values = 6;
  }

  message ExpressionValue {
    string traversal = 1;
    string statement = 2;
  }
}

message Range {
  string filename = 1;
  Pos start = 2;
  Pos end = 3;

  message Pos {
    int64 line = 1;
    int64 column = 2;
    int64 byte = 3;
  }
}

// Workspace defines an Enos workspace. In our case that means our working directory,
// output directory, flight plan and any Terraform specific configuration.
message Workspace {
  // flightplan is our workspace flight plan configuration and variables
  FlightPlan flightplan = 1;
  // terraform_exec contains our default and override Terraform execution
  // configuration.
  Terraform.Runner.Config tf_exec_cfg = 4 [json_name = "tf_exec_cfg"];
  // dir is our workspaces directory. This will default to the current working
  // directory.
  string dir = 5;
  // Terraform modules are scoped relative to directories. This optional field
  // can be used as the base working dir for generated modules. If it is not
  // set Enos will use $dir/.enos
  string out_dir = 6;
}

// FlightPlan is the Enos configuration.
message FlightPlan {
  string base_dir = 1;
  map<string, bytes> enos_hcl = 2 [json_name = "enos_hcl"];
  map<string, bytes> enos_vars_hcl = 3 [json_name = "enos_vars_hcl"];
  repeated string enos_vars_env = 4 [json_name = "enos_vars_env"];
}

message DecodeResponse {
  repeated Diagnostic diagnostics = 1;
  FlightPlan flightplan = 2;
}

// Scenario is an Enos scenario.
message Scenario {
  // ID is the unique identification of the scenario and its variants.
  message ID {
    string name = 1;
    Matrix.Vector variants = 2;
    string uid = 3;
    string filter = 4;
    string description = 5;
  }

  // Filter is a scenario filter.
  message Filter {
    string name = 1;
    SelectAll select_all = 2 [json_name = "select_all"];
    Matrix.Vector include = 3;
    repeated Matrix.Exclude exclude = 4;
    Matrix intersection_matrix = 5 [json_name = "intersection_matrix"];

    message SelectAll {}
  }

  message Outline {
    Ref.Scenario scenario = 1;
    Matrix matrix = 2;
    repeated Step steps = 3;
    repeated Quality verifies = 4;

    message Step {
      string name = 1;
      string description = 2;
      repeated Quality verifies = 3;
    }
  }
}

// Operator is our operation operator
message Operator {
  Config config = 1;

  message Config {
    // How many operation workers to run
    int32 worker_count = 1;
  }
}

// Operation is our primary schema for a scenario operation.
message Operation {
  // Request is an operation request. This is passed when making requests to
  // a server.
  message Request {
    Ref.Scenario scenario = 1;
    Workspace workspace = 2;
    string id = 3;

    oneof value {
      Generate generate = 11;
      Check check = 12;
      Launch launch = 13;
      Destroy destroy = 14;
      Run run = 15;
      Exec exec = 16;
      Output output = 17;
    }

    message Generate {}
    message Check {}
    message Launch {}
    message Destroy {}
    message Run {}
    message Exec {}
    message Output {}
  }

  // Response is an operation response from a server. The value of the response
  // will either be the full response for the operation type or a partial
  // event update.
  message Response {
    repeated Diagnostic diagnostics = 1;
    Ref.Operation op = 2;
    hashicorp.enos.v1.Operation.Status status = 3;

    // NOTE: If you add a new or modify value type be sure to update theoperation
    // operation helpers in the diagnostics package and the response writer init
    // the ui package.
    oneof value {
      Generate generate = 11;
      Check check = 12;
      Launch launch = 13;
      Destroy destroy = 14;
      Run run = 15;
      Exec exec = 16;
      Output output = 17;
    }

    message Generate {
      repeated Diagnostic diagnostics = 1;
      Terraform.Module terraform_module = 2 [json_name = "terraform_module"];
    }

    message Check {
      repeated Diagnostic diagnostics = 1;
      Operation.Response.Generate generate = 2;
      Terraform.Command.Init.Response init = 3;
      Terraform.Command.Validate.Response validate = 4;
      Terraform.Command.Plan.Response plan = 5;
    }

    message Launch {
      repeated Diagnostic diagnostics = 1;
      Operation.Response.Generate generate = 2;
      Terraform.Command.Init.Response init = 3;
      Terraform.Command.Validate.Response validate = 4;
      Terraform.Command.Plan.Response plan = 5;
      Terraform.Command.Apply.Response apply = 6;
    }

    message Destroy {
      repeated Diagnostic diagnostics = 1;
      Terraform.Command.Show.Response prior_state_show = 5;
      Operation.Response.Generate generate = 2;
      Terraform.Command.Init.Response init = 4;
      Terraform.Command.Destroy.Response destroy = 3;
    }

    message Run {
      repeated Diagnostic diagnostics = 1;
      Operation.Response.Generate generate = 2;
      Terraform.Command.Init.Response init = 3;
      Terraform.Command.Validate.Response validate = 4;
      Terraform.Command.Plan.Response plan = 5;
      Terraform.Command.Apply.Response apply = 6;
      Terraform.Command.Show.Response prior_state_show = 8;
      Terraform.Command.Destroy.Response destroy = 7;
    }

    message Exec {
      repeated Diagnostic diagnostics = 1;
      Terraform.Module terraform_module = 2 [json_name = "terraform_module"];
      Terraform.Command.Exec.Response exec = 3;
    }

    message Output {
      repeated Diagnostic diagnostics = 1;
      Terraform.Module terraform_module = 2 [json_name = "terraform_module"];
      Terraform.Command.Output.Response output = 3;
    }
  }

  // Events operation updates that can be streamed to the client while an operation
  // is in progress
  message Event {
    repeated Diagnostic diagnostics = 1;
    Ref.Operation op = 2;
    hashicorp.enos.v1.Operation.Status status = 3;
    // done is how we tell event listeners that event stream is completed. The
    // worker running the operation is responsible for setting this field when
    // the associated workFunc is completed.
    bool done = 4;
    google.protobuf.Timestamp published_at = 5;

    // NOTE: If you add a new value type you need to make sure you update the
    // diagnostics and ui packages to handle the new event types.
    oneof value {
      DecodeResponse decode = 10;
      Operation.Response.Generate generate = 11;
      Terraform.Command.Init.Response init = 12;
      Terraform.Command.Validate.Response validate = 13;
      Terraform.Command.Plan.Response plan = 14;
      Terraform.Command.Apply.Response apply = 15;
      Terraform.Command.Destroy.Response destroy = 16;
      Terraform.Command.Exec.Response exec = 17;
      Terraform.Command.Output.Response output = 18;
      Terraform.Command.Show.Response show = 19;
    }
  }

  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_UNKNOWN = 1;
    STATUS_QUEUED = 2;
    STATUS_WAITING = 3;
    STATUS_RUNNING = 4;
    STATUS_RUNNING_WARNING = 6;
    STATUS_FAILED = 7;
    STATUS_COMPLETED = 8;
    STATUS_COMPLETED_WARNING = 9;
    STATUS_CANCELLED = 10;
  }
}

message Terraform {
  message Module {
    string module_path = 1 [json_name = "module_path"];
    string rc_path = 2 [json_name = "rc_path"];
    Ref.Scenario scenario_ref = 3 [json_name = "scenario"];
  }

  message Command {
    message Init {
      message Response {
        repeated Diagnostic diagnostics = 1;
        string stderr = 2;
      }
    }

    message Validate {
      message Response {
        repeated Diagnostic diagnostics = 1;
        bool valid = 2;
        int64 error_count = 3 [json_name = "error_count"];
        int64 warning_count = 4 [json_name = "warning_count"];
        string format_version = 5 [json_name = "format_version"];
      }
    }

    message Plan {
      message Response {
        repeated Diagnostic diagnostics = 1;
        bool changes_present = 2 [json_name = "changes_present"];
        string stderr = 3;
      }
    }

    message Apply {
      message Response {
        repeated Diagnostic diagnostics = 1;
        string stderr = 2;
      }
    }

    message Destroy {
      message Response {
        repeated Diagnostic diagnostics = 1;
        string stderr = 2;
      }
    }

    message Exec {
      message Response {
        repeated Diagnostic diagnostics = 1;
        string sub_command = 2 [json_name = "sub_command"];
        string stderr = 3;
        string stdout = 4;
      }
    }

    message Output {
      message Response {
        repeated Diagnostic diagnostics = 1;
        repeated Meta meta = 2;

        message Meta {
          string name = 1;
          bytes type = 2;
          bytes value = 3;
          bool sensitive = 4;
          string stderr = 5;
        }
      }
    }

    message Show {
      message Response {
        repeated Diagnostic diagnostics = 1;
        // For now, we pass the entire state over the wire as a tfjson.State JSON
        // representation. You can unmarshal the value into that Go type if
        // necessary.
        bytes state = 2;
      }
    }
  }

  message Runner {
    Config config = 1;

    message Config {
      // Terraform CLI flags
      Flags flags = 1;
      // The path to the terraform binary
      string bin_path = 2;
      // Where the .terraformrc configuration is
      string config_path = 3;
      // The directory from which to execute Terraform
      string working_dir_path = 4;
      // Environment variables to set when executing Terraform
      map<string, string> env = 5;
      // User supplied sub-command
      string user_sub_command = 6;
      // Output filter
      string output_filter = 7;
      // Fail on warnings
      bool fail_on_warnings = 8;

      // Flags are a subset of the Terraform flags that we allow to be settable.
      message Flags {
        // -backup=path
        string backup_state_file_path = 1;
        // -lock-timeout=10s
        google.protobuf.Duration lock_timeout = 2;
        // -backend=false
        bool no_backend = 3;
        // -lock=false
        bool no_lock = 4;
        // -get=false
        bool no_download = 5;
        // -refresh=false
        bool no_refresh = 6;
        // -parallelism=n
        uint32 parallelism = 7;
        // -refresh-only
        bool refresh_only = 8;
        // -upgrade
        bool upgrade = 9;
        // -reconfigure=false
        bool no_reconfigure = 10;
      }
    }
  }
}

// Matrix represents our DSL matrix
message Matrix {
  repeated Vector vectors = 1;
  Vector include = 2;
  repeated Exclude exclude = 3;

  message Vector {
    repeated Element elements = 1;
  }

  message Element {
    string key = 1;
    string value = 2;
  }

  message Exclude {
    Vector vector = 1;
    Mode mode = 2;

    enum Mode {
      MODE_UNSPECIFIED = 0;
      // MODE_EXACTLY will match a vector that has the exact ordered elements
      MODE_EXACTLY = 1;
      // MODE_EQUAL_UNORDERED will match a vector that has the exact elements
      // but may be unordered.
      MODE_EQUAL_UNORDERED = 2;
      // MODE_CONTAINS will match any vector that has at least the given vector
      // elements in any order.
      MODE_CONTAINS = 3;
    }
  }
}

// Sample is a scenario matrix sample
message Sample {
  ID id = 1;
  repeated Attribute attributes = 2;
  repeated Subset subsets = 3;

  // ID is the unique identification of the sample and its subsets.
  message ID {
    string name = 1;
  }

  // A subet refers to a scenario subset of a matrix.
  message Subset {
    message ID {
      string name = 1;
    }

    ID id = 1;
    string scenario_name = 2 [json_name = "scenario_name"];
    string scenario_filter = 3 [json_name = "scenario_filter"];
    repeated Attribute attributes = 4;
    Matrix matrix = 5;
  }

  // A filter lets us dynamically filter our sample frame, limit our sample observation, or control
  // the randomness seed for deterministic observations.
  message Filter {
    Ref.Sample sample = 1;
    repeated Sample.Subset.ID subsets = 2;
    repeated Sample.Subset.ID exclude_subsets = 3 [json_name = "exclude_subsets"];
    int32 max_elements = 4;
    int32 min_elements = 5;
    float percentage = 6;
    int64 seed = 7;
  }

  // A sample element is one instance of the sample observation.
  message Element {
    Ref.Sample sample = 1;
    Ref.Sample.Subset subset = 2;
    Ref.Scenario scenario = 3;
    google.protobuf.Struct attributes = 4;
  }

  // A sample observation the result of taking a sample.
  message Observation {
    repeated Diagnostic diagnostics = 1;
    repeated Sample.Element elements = 2;
    Sample.Filter filter = 3;
  }

  // Attributes are various metadata that was injected into a sample element.
  message Attribute {
    string key = 1;
    // To support unknown schema we pass the attributes as JSON encoded cty types and values.
    bytes cty_type = 2 [json_name = "cty_type"];
    bytes cty_value = 3 [json_name = "cty_value"];
  }
}

message Ref {
  message Scenario {
    hashicorp.enos.v1.Scenario.ID id = 1;
  }

  message Operation {
    string id = 1;
    Scenario scenario = 2;
  }

  message Sample {
    hashicorp.enos.v1.Sample.ID id = 1;

    message Subset {
      hashicorp.enos.v1.Sample.Subset.ID id = 1;
    }
  }
}

message GetVersionRequest {}
message GetVersionResponse {
  repeated Diagnostic diagnostics = 1;
  string version = 2;
  string git_sha = 3 [json_name = "git_sha"];
}

message ValidateScenariosConfigurationRequest {
  Workspace workspace = 1;
  Scenario.Filter filter = 2;
}

message ValidateScenariosConfigurationResponse {
  repeated Diagnostic diagnostics = 1;
  DecodeResponse decode = 2;
}

message ListScenariosRequest {
  Workspace workspace = 1;
  Scenario.Filter filter = 2;
}

message ListScenariosResponse {
  repeated Diagnostic diagnostics = 1;
  DecodeResponse decode = 2;
  repeated Ref.Scenario scenarios = 3;
}

message EnosServiceListScenariosResponse {
  oneof response {
    Ref.Scenario scenario = 1;
    DecodeResponse decode = 3;
  }
}

message GenerateScenariosRequest {
  Workspace workspace = 1;
  Scenario.Filter filter = 2;
}

message GenerateScenariosResponse {
  repeated Diagnostic diagnostics = 1;
  DecodeResponse decode = 2;
  repeated Ref.Operation operations = 3;
}

message CheckScenariosRequest {
  Workspace workspace = 1;
  Scenario.Filter filter = 2;
}

message CheckScenariosResponse {
  repeated Diagnostic diagnostics = 1;
  DecodeResponse decode = 2;
  repeated Ref.Operation operations = 3;
}

message LaunchScenariosRequest {
  Workspace workspace = 1;
  Scenario.Filter filter = 2;
}

message LaunchScenariosResponse {
  repeated Diagnostic diagnostics = 1;
  DecodeResponse decode = 2;
  repeated Ref.Operation operations = 3;
}

message DestroyScenariosRequest {
  Workspace workspace = 1;
  Scenario.Filter filter = 2;
}

message DestroyScenariosResponse {
  repeated Diagnostic diagnostics = 1;
  DecodeResponse decode = 2;
  repeated Ref.Operation operations = 3;
}

message RunScenariosRequest {
  Workspace workspace = 1;
  Scenario.Filter filter = 2;
}

message RunScenariosResponse {
  repeated Diagnostic diagnostics = 1;
  DecodeResponse decode = 2;
  repeated Ref.Operation operations = 3;
}

message ExecScenariosRequest {
  Workspace workspace = 1;
  Scenario.Filter filter = 2;
}

message ExecScenariosResponse {
  repeated Diagnostic diagnostics = 1;
  DecodeResponse decode = 2;
  repeated Ref.Operation operations = 3;
}

message OutputScenariosRequest {
  Workspace workspace = 1;
  Scenario.Filter filter = 2;
}

message OutputScenariosResponse {
  repeated Diagnostic diagnostics = 1;
  DecodeResponse decode = 2;
  repeated Ref.Operation operations = 3;
}

message ListSamplesRequest {
  Workspace workspace = 1;
}

message ListSamplesResponse {
  repeated Diagnostic diagnostics = 1;
  DecodeResponse decode = 2;
  repeated Ref.Sample samples = 3;
}

message ObserveSampleRequest {
  Workspace workspace = 1;
  Sample.Filter filter = 2;
}

message ObserveSampleResponse {
  repeated Diagnostic diagnostics = 1;
  DecodeResponse decode = 2;
  Sample.Observation observation = 3;
}

message FormatRequest {
  repeated File files = 1;
  Config config = 2;

  message File {
    string path = 1;
    bytes body = 2;
  }

  message Config {
    bool write = 1;
    bool list = 2;
    bool check = 3;
    bool diff = 4;
    bool recursive = 5;
  }
}

message FormatResponse {
  repeated Diagnostic diagnostics = 1;
  repeated Response responses = 2;

  message Response {
    repeated Diagnostic diagnostics = 1;
    string path = 2;
    bool changed = 3;
    string diff = 4;
    string body = 5; // Used for formatted STDIN
  }
}

message OperationEventStreamRequest {
  Ref.Operation op = 1;
}

message OperationEventStreamResponse {
  repeated Diagnostic diagnostics = 1;
  Operation.Event event = 2;
}

message OperationRequest {
  Ref.Operation op = 1;
}

message OperationResponse {
  repeated Diagnostic diagnostics = 1;
  Operation.Response response = 2;
}

message OperationResponses {
  repeated Diagnostic diagnostics = 1;
  DecodeResponse decode = 2;
  repeated Operation.Response responses = 3;
}

message OutlineScenariosRequest {
  Workspace workspace = 1;
  Scenario.Filter filter = 2;
}

message OutlineScenariosResponse {
  repeated Diagnostic diagnostics = 1;
  DecodeResponse decode = 2;
  repeated Scenario.Outline outlines = 3;
  repeated Quality verifies = 4;
}

// Quality describes a quality chracteristic that a scenario step can verify.
message Quality {
  string name = 1;
  string description = 2;
}
